# Character schemas
type User {
  id: ID!
  name: String!
}

# Restrictions may need to be resolved in two parts, in the resolver. 
# Or they can alter queries on the frontend
type Campaign {
    id: ID!
    user: [User!]
    restrictions: [String]
    characters: [Character!]
}


# Try to keep broad so WtWf and MtA can be added
interface Character {
    id: ID
    name: String!
    player: User!
    chronicle: [Campaign]!
    nature: String    
    demeanor: String 
}

type Vampire implements Character {
    id: ID
    name: String!
    player: User!
    chronicle: [Campaign]!
    nature: String
    demeanor: String
    concept: String
    clan: Clan!
    generation: Generation!
    Sire: Vampire
    attributes: [Characteristic!]!
    abilities: [Characteristic!]!
    advantages: [Characteristic!]!
}