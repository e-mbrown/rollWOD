// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Character interface {
	IsCharacter()
	GetID() *string
	GetName() string
	GetPlayer() *User
	GetChronicle() []*Campaign
	GetNature() *string
	GetDemeanor() *string
}

type Entry interface {
	IsEntry()
	GetID() *string
	GetName() string
	GetDescription() string
}

type Age struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Description string  `json:"description"`
}

func (Age) IsEntry()                    {}
func (this Age) GetID() *string         { return this.ID }
func (this Age) GetName() string        { return this.Name }
func (this Age) GetDescription() string { return this.Description }

type Archetypes struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Description string  `json:"description"`
	Sys         string  `json:"sys"`
}

func (Archetypes) IsEntry()                    {}
func (this Archetypes) GetID() *string         { return this.ID }
func (this Archetypes) GetName() string        { return this.Name }
func (this Archetypes) GetDescription() string { return this.Description }

type Campaign struct {
	ID           string      `json:"id"`
	User         []*User     `json:"user,omitempty"`
	Restrictions []*string   `json:"restrictions,omitempty"`
	Characters   []Character `json:"characters,omitempty"`
}

type Characteristic struct {
	ID          *string  `json:"id,omitempty"`
	Name        string   `json:"name"`
	Type        CharType `json:"type"`
	Description string   `json:"description"`
	Descbyval   []string `json:"descbyval"`
}

func (Characteristic) IsEntry()                    {}
func (this Characteristic) GetID() *string         { return this.ID }
func (this Characteristic) GetName() string        { return this.Name }
func (this Characteristic) GetDescription() string { return this.Description }

type Clan struct {
	ID             *string       `json:"id,omitempty"`
	Name           string        `json:"name"`
	Description    string        `json:"description"`
	Appearance     string        `json:"appearance"`
	Associatedsect []*Sect       `json:"associatedsect"`
	Haven          string        `json:"haven"`
	Background     string        `json:"background"`
	Character      string        `json:"character"`
	Discipline     []*Discipline `json:"discipline"`
	Weakness       string        `json:"weakness"`
	Organizations  *string       `json:"organizations,omitempty"`
	Subclan        []*Clan       `json:"subclan"`
	Strongholds    []string      `json:"strongholds,omitempty"`
	Ishighclan     *bool         `json:"ishighclan,omitempty"`
	Issubclan      *bool         `json:"issubclan,omitempty"`
}

func (Clan) IsEntry()                    {}
func (this Clan) GetID() *string         { return this.ID }
func (this Clan) GetName() string        { return this.Name }
func (this Clan) GetDescription() string { return this.Description }

type DiscAbilities struct {
	ID          *string  `json:"id,omitempty"`
	Name        string   `json:"name"`
	Description string   `json:"description"`
	Lvl         int      `json:"lvl"`
	System      []string `json:"system,omitempty"`
}

func (DiscAbilities) IsEntry()                    {}
func (this DiscAbilities) GetID() *string         { return this.ID }
func (this DiscAbilities) GetName() string        { return this.Name }
func (this DiscAbilities) GetDescription() string { return this.Description }

type Discipline struct {
	ID          *string          `json:"id,omitempty"`
	Name        string           `json:"name"`
	Description string           `json:"description"`
	Abilities   []*DiscAbilities `json:"abilities,omitempty"`
}

func (Discipline) IsEntry()                    {}
func (this Discipline) GetID() *string         { return this.ID }
func (this Discipline) GetName() string        { return this.Name }
func (this Discipline) GetDescription() string { return this.Description }

type GeneralInfo struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Description string  `json:"description"`
}

func (GeneralInfo) IsEntry()                    {}
func (this GeneralInfo) GetID() *string         { return this.ID }
func (this GeneralInfo) GetName() string        { return this.Name }
func (this GeneralInfo) GetDescription() string { return this.Description }

type Generation struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Description string  `json:"description"`
}

func (Generation) IsEntry()                    {}
func (this Generation) GetID() *string         { return this.ID }
func (this Generation) GetName() string        { return this.Name }
func (this Generation) GetDescription() string { return this.Description }

type Query struct {
}

type Sect struct {
	ID          *string  `json:"id,omitempty"`
	Name        string   `json:"name"`
	Description string   `json:"description"`
	Titles      []*Title `json:"titles,omitempty"`
	Practices   string   `json:"practices"`
	Rituals     string   `json:"rituals"`
	Strongholds []string `json:"strongholds,omitempty"`
}

func (Sect) IsEntry()                    {}
func (this Sect) GetID() *string         { return this.ID }
func (this Sect) GetName() string        { return this.Name }
func (this Sect) GetDescription() string { return this.Description }

type Title struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Description string  `json:"description"`
}

func (Title) IsEntry()                    {}
func (this Title) GetID() *string         { return this.ID }
func (this Title) GetName() string        { return this.Name }
func (this Title) GetDescription() string { return this.Description }

type Tradition struct {
	ID          *string        `json:"id,omitempty"`
	Name        string         `json:"name"`
	Description string         `json:"description"`
	Traditions  []*GeneralInfo `json:"traditions,omitempty"`
}

func (Tradition) IsEntry()                    {}
func (this Tradition) GetID() *string         { return this.ID }
func (this Tradition) GetName() string        { return this.Name }
func (this Tradition) GetDescription() string { return this.Description }

type User struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Vampire struct {
	ID         *string           `json:"id,omitempty"`
	Name       string            `json:"name"`
	Player     *User             `json:"player"`
	Chronicle  []*Campaign       `json:"chronicle"`
	Nature     *string           `json:"nature,omitempty"`
	Demeanor   *string           `json:"demeanor,omitempty"`
	Concept    *string           `json:"concept,omitempty"`
	Clan       *Clan             `json:"clan"`
	Generation *Generation       `json:"generation"`
	Sire       *Vampire          `json:"Sire,omitempty"`
	Attributes []*Characteristic `json:"attributes"`
	Abilities  []*Characteristic `json:"abilities"`
	Advantages []*Characteristic `json:"advantages"`
}

func (Vampire) IsCharacter()          {}
func (this Vampire) GetID() *string   { return this.ID }
func (this Vampire) GetName() string  { return this.Name }
func (this Vampire) GetPlayer() *User { return this.Player }
func (this Vampire) GetChronicle() []*Campaign {
	if this.Chronicle == nil {
		return nil
	}
	interfaceSlice := make([]*Campaign, 0, len(this.Chronicle))
	for _, concrete := range this.Chronicle {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this Vampire) GetNature() *string   { return this.Nature }
func (this Vampire) GetDemeanor() *string { return this.Demeanor }

type CharType string

const (
	CharTypeAttribute  CharType = "attribute"
	CharTypeTalent     CharType = "talent"
	CharTypeDiscipline CharType = "discipline"
	CharTypeSkill      CharType = "skill"
	CharTypeBackground CharType = "background"
)

var AllCharType = []CharType{
	CharTypeAttribute,
	CharTypeTalent,
	CharTypeDiscipline,
	CharTypeSkill,
	CharTypeBackground,
}

func (e CharType) IsValid() bool {
	switch e {
	case CharTypeAttribute, CharTypeTalent, CharTypeDiscipline, CharTypeSkill, CharTypeBackground:
		return true
	}
	return false
}

func (e CharType) String() string {
	return string(e)
}

func (e *CharType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CharType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid charType", str)
	}
	return nil
}

func (e CharType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
