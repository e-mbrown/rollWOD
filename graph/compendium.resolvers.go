package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	"github.com/rollwod/graph/model"
	"github.com/rollwod/seed"
)

// CreateCharacteristic is the resolver for the createCharacteristic field.
func (r *mutationResolver) CreateCharacteristic(ctx context.Context, input model.NewCharacteristic) (*model.Characteristic, error) {
	char := &model.Characteristic{
		Name:        input.Name,
		Type:        input.Type,
		Description: input.Description,
		ValDesc:     input.ValDesc,
	}

	r.characteristics = append(r.characteristics, char)

	return char, nil
}

// Seed is the resolver for the seed field.
func (r *mutationResolver) Seed(ctx context.Context, input *string) (string, error) {
	data := seed.InfoMap

	for k, v := range data {
		for ik, iv := range v {
			entry := model.NewCharacteristic {
				Name:        ik,
				Type:        model.CharType(k),
				Description: iv.BaseDesc,
				ValDesc:     iv.ValDescString(),
			}
			_, err :=r.Mutation().CreateCharacteristic(ctx, entry)
			if err != nil {
				return "false", err
			}
		}
	}
	return "true", nil
}

// Characteristic is the resolver for the characteristic field.
func (r *queryResolver) Characteristic(ctx context.Context) ([]*model.Characteristic, error) {
	return r.characteristics, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
