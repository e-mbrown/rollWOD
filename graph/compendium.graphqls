# Pk on name, secondary on Entrytype
interface Entry {
    id: ID
    name: String!
    description: String!
}

type GeneralInfo implements Entry {
    id: ID
    name: String!
    description: String!
}

type Generation implements Entry {
    id: ID
    name: String!
    description: String!
}

type Age implements Entry {
    id: ID
    name: String!
    description: String!
}

type Title implements Entry {
    id: ID
    name: String!
    description: String!
}

type Clan implements Entry {
    id: ID
    name: String!
    description: String!
    appearance: String!
    associatedSect: [Sect]!
    haven: String!
    background: String!
    character: String!
    discipline: [Discipline!]
    weakness: String!
    organizations: String
    subClan: [Clan!]
    strongholds: [String!]
    isHighClan: Boolean
    isSubclan: Boolean
}

type Sect implements Entry{
    id: ID
    name: String!
    description: String!
    titles: [Title!]
    practices: String!
    rituals: String!
    strongholds: [String!]
}


type Tradition implements Entry{
    id: ID
    name: String!
    description: String!
    traditions: [GeneralInfo!]
}

type Discipline implements Entry {
    id: ID
    name: String!
    description: String!
    abilities: [DiscAbilities]
}

type DiscAbilities implements Entry {
    id: ID
    name: String!
    description: String!
    lvl: Int!
    system: [String!]
}

type Characteristic implements Entry{
    id: ID
    name: String!
    type: charType!
    description: String!
    DescbyVal: [String!]!
}


enum charType {
    attribute
    talent
    discipline
    skill
    background
}

type Query {
    # GetAll Queries
        characteristics: [Characteristic]!
        titles: [Title]!
        sects: [Sect]!
        traditions: [Tradition]!
    # GetOne
        getSect(name: [String!]): [Sect]
        getTradition(name: String!): Tradition
        GenInfoByName(name: String!): GeneralInfo
        GenByID(id: ID!): GeneralInfo
}