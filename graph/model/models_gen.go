// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Character interface {
	IsCharacter()
	GetID() *string
	GetName() string
	GetPlayer() *User
	GetChronicle() []*Campaign
	GetNature() *string
	GetDemeanor() *string
}

type Campaign struct {
	ID   string  `json:"id"`
	User []*User `json:"user,omitempty"`
}

type Characteristics struct {
	Name     string   `json:"name"`
	Type     CharType `json:"type"`
	BaseDesc string   `json:"baseDesc"`
	Val      int      `json:"val"`
	ValDesc  []string `json:"ValDesc"`
}

type Clan struct {
	Name string `json:"name"`
}

type NewTodo struct {
	Text   string `json:"text"`
	UserID string `json:"userId"`
}

type Todo struct {
	ID   string `json:"id"`
	Text string `json:"text"`
	Done bool   `json:"done"`
	User *User  `json:"user"`
}

type User struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Vampire struct {
	ID         *string            `json:"id,omitempty"`
	Name       string             `json:"name"`
	Player     *User              `json:"player"`
	Chronicle  []*Campaign        `json:"chronicle"`
	Nature     *string            `json:"nature,omitempty"`
	Demeanor   *string            `json:"demeanor,omitempty"`
	Concept    *string            `json:"concept,omitempty"`
	Clan       *Clan              `json:"clan"`
	Generation Generation         `json:"generation"`
	Sire       Character          `json:"Sire,omitempty"`
	Attributes []*Characteristics `json:"attributes"`
	Abilities  []*Characteristics `json:"abilities"`
	Advantages []*Characteristics `json:"advantages"`
}

func (Vampire) IsCharacter()          {}
func (this Vampire) GetID() *string   { return this.ID }
func (this Vampire) GetName() string  { return this.Name }
func (this Vampire) GetPlayer() *User { return this.Player }
func (this Vampire) GetChronicle() []*Campaign {
	if this.Chronicle == nil {
		return nil
	}
	interfaceSlice := make([]*Campaign, 0, len(this.Chronicle))
	for _, concrete := range this.Chronicle {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this Vampire) GetNature() *string   { return this.Nature }
func (this Vampire) GetDemeanor() *string { return this.Demeanor }

type Generation string

const (
	GenerationSecondGen              Generation = "SecondGen"
	GenerationThirdGen               Generation = "ThirdGen"
	GenerationFourthFifthGen         Generation = "Fourth_FifthGen"
	GenerationSixthEighthGen         Generation = "Sixth_EighthGen"
	GenerationNinthTenthGen          Generation = "Ninth_TenthGen"
	GenerationEleventhThirteenthGen  Generation = "Eleventh_ThirteenthGen"
	GenerationFourteenthFifteenthGen Generation = "Fourteenth_FifteenthGen"
)

var AllGeneration = []Generation{
	GenerationSecondGen,
	GenerationThirdGen,
	GenerationFourthFifthGen,
	GenerationSixthEighthGen,
	GenerationNinthTenthGen,
	GenerationEleventhThirteenthGen,
	GenerationFourteenthFifteenthGen,
}

func (e Generation) IsValid() bool {
	switch e {
	case GenerationSecondGen, GenerationThirdGen, GenerationFourthFifthGen, GenerationSixthEighthGen, GenerationNinthTenthGen, GenerationEleventhThirteenthGen, GenerationFourteenthFifteenthGen:
		return true
	}
	return false
}

func (e Generation) String() string {
	return string(e)
}

func (e *Generation) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Generation(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Generation", str)
	}
	return nil
}

func (e Generation) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CharType string

const (
	CharTypeAttribute  CharType = "attribute"
	CharTypeTalent     CharType = "talent"
	CharTypeDiscipline CharType = "discipline"
)

var AllCharType = []CharType{
	CharTypeAttribute,
	CharTypeTalent,
	CharTypeDiscipline,
}

func (e CharType) IsValid() bool {
	switch e {
	case CharTypeAttribute, CharTypeTalent, CharTypeDiscipline:
		return true
	}
	return false
}

func (e CharType) String() string {
	return string(e)
}

func (e *CharType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CharType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid charType", str)
	}
	return nil
}

func (e CharType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
